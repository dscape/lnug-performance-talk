{
  "name": "defaultable",
  "version": "0.7.2",
  "author": {
    "name": "Jason Smith",
    "email": "jhs@iriscouch.com",
    "url": "http://www.iriscouch.com/"
  },
  "description": "Transparent, drop-in helper for overridable, inheritable defaults in CommonJS modules",
  "tags": [
    "nodejs",
    "npm",
    "commonjs",
    "development",
    "modules",
    "default",
    "defaults"
  ],
  "homepage": "http://github.com/iriscouch/defaultable",
  "repository": {
    "type": "git",
    "url": "git://github.com/iriscouch/defaultable"
  },
  "engines": [
    "node"
  ],
  "dependencies": {},
  "devDependencies": {
    "tap": "0.0.10"
  },
  "main": "defaultable.js",
  "readme": "# Default options for NodeJS, NPM, and CommonJS modules\n\nDefaultable is a simple drop-in tool to make your Node API very convenient for your users. It comes from internal [Iris Couch](http://www.iriscouch.com) tooling.\n\nDefaultable is pure CommonJS Javascript, and is also available as an NPM module.\n\n    $ npm install defaultable\n\n## Is it any good?\n\nYes.\n\n## What your users see\n\nWith Defaultable, these are the promises you make to your users (in documentation, presentations, etc.)\n\n*Dear users, just require my code and use it like normal.*\n\n```javascript\nvar api = require(\"my_mod\");\n\napi.do_stuff(\"Bob\", { minimum:5, dollars:10 }); // Process Bob.\napi.do_stuff(\"Eve\", { minimum:5, dollars:800}); // Process Eve.\n```\n\n*If you are using the same options a lot, set them as defaults.*\n\n```javascript\nvar api = require(\"my_mod\").defaults({ \"minimum\": 5 });\n\napi.do_stuff(\"Bob\", { dollars:10 }); // minimum will be 5\napi.do_stuff(\"Eve\", { dollars:800}); // minimum is still 5\n```\n\n*Defaults can even inherit from other defaults.*\n\n```javascript\nvar api = require(\"my_mod\");\n\nvar fivers = api.defaults({ \"minimum\": 5}});\nvar rich = fivers.defaults({\"dollars\": 10});\nvar poor = fivers.defaults({\"dollars\": 800});\n\npoor.do_stuff(\"Bob\"); // dollars will be 10, minimum will be 5\nrich.do_stuff(\"Eve\"); // dollars will be 800, minimum is still 5\n```\n\n## What you see\n\nDefaulable wraps a CommonJS module.\n\nYour original code:\n\n```javascript\n// my_mod.js\n\n// My code basically starts here\nvar DEFAULTS = { \"minimum\":0, \"dollars\":0 };\n\nexports.do_stuff = function(person, opts) {\n  opts = opts || {};\n\n  console.log(\"Processing: \" + person);\n  console.log(\"  minimum = \" + opts.minimum || DEFAULTS.minimum);\n  console.log(\"  dollars = $\" + opts.dollars || DEFAULTS.dollars);\n}\n// And obviously it ends here.\n```\n\nYour new code:\n\n```javascript\n// my_mod.js\n\n// Insert these lines at the top...\nrequire('defaultable')(module,\n  { \"minimum\": 0\n  , \"dollars\": 0\n  }, function(module, exports, DEFAULTS) { // The rest of your code follows unchanged.\n\n// My code basically starts here (pretty much unmodified, but no hard-coded DEFAULTS)\nexports.do_stuff = function(person, opts) {\n  opts = opts || {};\n  console.log(\"Processing: \" + person);\n  console.log(\"  minimum = \" + opts.minimum || DEFAULTS.minimum);\n  console.log(\"  dollars = $\" + opts.dollars || DEFAULTS.dollars);\n}\n// Code ends here, just one more thing to append...\n\n}) // defaultable\n```\n\n## How it works\n\nIt's really simple.\n\nDefaultable passes the initial defaults to you as `DEFAULTS`. Use `module`, `module.exports`, or `exports` as usual to build your module API.\n\nYour API gets an additional `.defaults()` function, which will re-evaluate your code with new user-provided defaults.\n\n## Automatic defaults in require()\n\nIf you have multiple related modules, it can be nice for them to share defaults.\n\n```javascript\n// main.js\nrequire('defaultable')(module,\n  { \"minimum\": 0\n  , \"dollars\": 0\n  }, function(module, exports, DEFS) {\n\nvar submod = require('./sub_mod').defaults(DEFS); // Bad!\n\n})\n```\n\nFor this situation, defaultable provides a wrapped `require()` function. It works just like before, however if the modules you load is itself defaultable, it will be initialized with the current defaults.\n\n```javascript\n// main.js\nrequire('defaultable')(module,\n  { \"minimum\": 0\n  , \"dollars\": 0\n  }, function(module, exports, DEFS, require) {\n\nvar submod = require('./sub_mod'); // Good! Notice the \"require\" parameter above.\n\nvar legacy_mod = require('./legacy_mod'); // Still works.\nvar http = require('http');               // Still works.\n\n})\n```\n\nIf you *do not* want your module to inherit anything implicitly, use Defaultable's `.def()` function instead. This is useful for top-level modules of packages, for example.\n\n```javascript\n// main.js -- The \"main\" file in package.json\nrequire('defaultable').def(module,\n  { \"minimum\": 0\n  , \"dollars\": 0\n  }, function(module, exports, DEFS) {\n\nexports.check = function() {\n  console.log(\"Dollars = \" + dollars); // Always \"0\" for require(); still changeable via .defaults()\n}\n\n})\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/iriscouch/defaultable/issues"
  },
  "_id": "defaultable@0.7.2",
  "dist": {
    "shasum": "f345ce7a674055ef5212931403dae3f39d8a831c"
  },
  "_from": "defaultable@~0.7.2",
  "_resolved": "http://registry.nodejitsu.com/defaultable/-/defaultable-0.7.2.tgz"
}
