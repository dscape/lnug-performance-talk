#!/usr/bin/env node
var request  = require('request');
var fs       = require('fs');
var path     = require('path');
var optimist = require('optimist');
var url      = require('url');
var opener   = require("opener");

//
// user home in a os agnostic way
//
var tilde = 
  process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];

//
// location of our dot file, normally `~/.ghcopy`
//
var dotf = path.join(tilde, '.ghcopy');

//
// if options were not specified we need to check if the user has a .file
// containing his credentials.
//
var opts_from_file = {};

//
// get our token, plus user defined defaults from our dot file
//
try {
  var dotfile = JSON.parse(fs.readFileSync(dotf));
  opts_from_file.t = dotfile.t;
  opts_from_file.f = dotfile.f;
  opts_from_file.d = dotfile.d;
  opts_from_file.p = dotfile.p;
  opts_from_file.o = dotfile.o;
  opts_from_file.v = dotfile.v;
} catch (_) {
  //
  // failed, no file :\
  // get stuff from optimist
  //
}

var argv    = optimist
  //
  // usage
  //
  .usage(
    'cat ~/.ssh/id_rsa.pub 2>&1 | $0\n' +
    'hint : you can also define `t` in ~/.ghcopy\n' +
    '       use $0-authorize to securely create a token for you')
  //
  // d: description
  //
  .alias('d', 'description')
    .describe('d', 'description for this gist')
    ["default"]('d',
      opts_from_file.d || 'gist created by github.com/dscape/ghcopy')
  //
  // v: verbose
  //
  .alias('v', 'verbose')
    .describe('v', 'output to console while creating the gist')
    .boolean(['v'])
    ["default"]('v',
      typeof opts_from_file.v === 'boolean' ? opts_from_file.v : true)
  //
  // f: filename
  //
  .alias('f', 'filename')
    .describe('f', 'filename for the file pasted in this gist')
    ["default"]('f', opts_from_file.f || 'ghcopy.txt')
  //
  // p: public (or not)
  //
  .alias('p', 'public')
    .describe('p', 'boolean defining if this gist should be public or not')
    .boolean(['p'])
    ["default"]('p',
      typeof opts_from_file.p === 'boolean' ? opts_from_file.p : false)
  //
  // o: open in a browser
  //
  .alias('o', 'open')
    .describe('o', 'boolean defining if we should open it in a browser')
    .boolean(['o'])
    ["default"]('o',
      typeof opts_from_file.o === 'boolean' ? opts_from_file.o : true)
  //
  // t: github token
  //
  .alias('t', 'token')
    .describe('t', 'define a github token')
    ["default"]('t', opts_from_file.t ||
      '402592a8d7af882dec19a60b1b0172c016193de4')
    .demand('t')
  //
  // h, for halp
  //
  .alias('h', 'help')
    .describe('h', 'this message')
  .argv
  ;

//
// user asking for help
//
if(argv.h) {
  console.log(optimist.help());
  process.exit();
}

//
// to buffer our data
//
var buffer = '';

//
// to control if we are updating a gist or creating a new one
//
var gist_id;

//
// to control if our program is in the middle of a save operation
//
var saving = false;

//
// to control if a sigint occurred
//
var sigint_occured = false;

//
// our request to create a gist
// defaults to updates, posts change this req object in the method
// that does the request
//
var req = 
  { method        : "PATCH"
  , headers       :
    { "Authorization" : "bearer " + argv.t
    , "user-agent"    : "github.com/dscape/ghcopy"
    }
  , uri           : url.format(
    { hostname    : 'api.github.com'
    , pathname    : "/gists"
    , protocol    : "https"
    })
  , json: 
    { description : argv.d
    , "public"    : argv.p
    , files       : {}
    }
  };

//
// helpful when we end and somehow we cant reuse the original gist
//
req.original_uri = req.uri;

//
// ### function save_in_github(ended, tried)
// #### @ended {boolean} *optional* if this is the last time this is being
//      called
// #### @tried {number}  *optional* number of retries so far, defaults to
//      zero
//
// tries to save the buffer to gist.github — will try to create gist if gist
// doesn't exist. on failure stuff keeps being buffered and this will be
// retried either on a `data` or `end` event
//
function save_in_github(ended, tried) {
  //
  // do we actually have stuff to send?
  //
  var data_to_send = buffer.trim().length !== 0;

  //
  // if there is no data to send
  //
  if(!data_to_send) {
    //
    // and our stream has ended
    //
    if(ended) {
      //
      // we are done lets get out of here
      //
      throw new Error('error: nothing to send');
    }
    else {
      //
      // continue
      //
      return;
    }
  }

  //
  // control retries
  //
  tried = tried || 0;

  //
  // if we are saving
  //
  if(saving) {
    //
    // and the stream has ended
    // try to post an update in a bit
    //
    if(ended) {
      //
      // max (@maxogden of course) retries
      //
      if(tried === 3) {
        //
        // this will force a new gist
        //
        gist_id = null;
        //
        // absence of return means continue.. js, oh how we love you.
        //
      }
      //
      // retry
      //
      else {
        //
        // nothing we can do, so we need to retry until this works
        //
        return setTimeout(function () {
          save_in_github(true, tried + 1);
        }, 500);
      }
    }
    //
    // not ended? continue buffering
    //
    else {
      return;
    }
  }

  //
  // by default we assume this is an update and gist_id exists
  // if this is not an update we need to create the gist
  //
  if(typeof gist_id !== 'string') {
    req.method = 'POST';
    req.uri = req.original_uri;
  }

  //
  // add our current buffer to the file
  //
  req.json.files[argv.f] = { content: buffer };

  //
  // set to saving, to avoid people doing concurrent requests
  //
  saving = true;

  request(req, function (err, _, body) {
    //
    // request is done
    //
    saving = false;

    if(err) {
      if(err.code === 'ENOTFOUND' && err.syscall === 'getaddrinfo') {
        console.error('error: not connected to the internet');
      }
      else {
        console.error('error: request failed with message — ' + err.message);
      }

      //
      // continue to gather stuff
      // maybe the internet had a glitch and it comes back online
      // buffer is never purged, so this is ok
      //
      return;
    }

    if(!body.html_url) {
      console.error('error: no url in request body');
      console.error(JSON.stringify(body, null, 2), req);
      //
      // continue
      //
      return;
    }

    if(typeof gist_id !== 'string') {
      gist_id = body.id;
      req.uri += '/' + gist_id;
    }

    if(ended) {
      console.log('>', body.html_url);
      if(argv.o) {
        opener(body.html_url);
      }
    }
  });
}

function write_and_buffer_chunk(chunk) {
  //
  // if we are in verbose mode write it out
  //
  if(argv.v) {
    process.stdout.write(chunk);
  }

  //
  // add to buffer
  //
  buffer += chunk;
  
  //
  // update or create in github
  //
  save_in_github();
}

var stdin = process.openStdin();
stdin.setEncoding('utf8');

stdin.on('data', write_and_buffer_chunk);

stdin.on('end', function () { save_in_github(true); });
process.on('SIGINT', function () {
  //
  // after the first sigint close this stuff and get on with it
  //
  if(!sigint_occured) {
    sigint_occured = true;
    save_in_github(true);
    stdin.destroySoon();
  } else {
    console.log('you really want to quit. this is your gist id' + gist_id);
    process.exit();
  }
});